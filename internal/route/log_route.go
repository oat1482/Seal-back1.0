package route

import (
	"log"

	"github.com/Kev2406/PEA/internal/controller"
	"github.com/gofiber/fiber/v2"
)

func AdminOnlyMiddleware(c *fiber.Ctx) error {
	// Log path ‡∏Ç‡∏≠‡∏á request
	log.Printf("üîç [AdminOnlyMiddleware] Request Path: %s", c.Path())

	// ‡∏î‡∏∂‡∏á role ‡∏à‡∏≤‡∏Å context
	role, ok := c.Locals("role").(string)
	log.Printf("üîç [AdminOnlyMiddleware] Role in context: %v (ok: %v)", role, ok)

	if !ok || role != "admin" {
		log.Printf("üö´ [AdminOnlyMiddleware] Access denied. Required role: admin, Found: %v", role)
		return c.Status(fiber.StatusForbidden).JSON(fiber.Map{"error": "Access denied. Admins only"})
	}

	log.Println("‚úÖ [AdminOnlyMiddleware] Access granted for admin")
	return c.Next()
}

func SetupLogRoutes(app *fiber.App, logController *controller.LogController) {
	// ‡∏™‡∏£‡πâ‡∏≤‡∏á group /api ‡∏Å‡πà‡∏≠‡∏ô
	api := app.Group("/api")
	// ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á group /logs ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ /api ‚Üí ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏∑‡∏≠ /api/logs
	logGroup := api.Group("/logs")
	log.Println("üîß [SetupLogRoutes] Setting up /api/logs routes")

	// ‡πÉ‡∏ä‡πâ middleware ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin
	logGroup.Use(AdminOnlyMiddleware)

	// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î route GET /api/logs ‡∏û‡∏£‡πâ‡∏≠‡∏° log ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
	logGroup.Get("/", func(c *fiber.Ctx) error {
		log.Printf("üîç [SetupLogRoutes] GET /api/logs invoked")
		return logController.GetLogsHandler(c)
	})
}
