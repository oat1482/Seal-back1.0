package service

import (
	"encoding/json"
	"errors"
	"log"
	"net/http"
	"time"

	"github.com/Kev2406/PEA/internal/domain/model"
	"github.com/golang-jwt/jwt/v5"
)

// ‚úÖ Secret Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mock JWT (‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å ENV ‡∏à‡∏£‡∏¥‡∏á)
var secretKey = []byte("your-secret-key")

type AuthService struct{}

func NewAuthService() *AuthService {
	return &AuthService{}
}

// ‚úÖ VerifyPEAToken ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token ‡∏ú‡πà‡∏≤‡∏ô PEA API ‡∏´‡∏£‡∏∑‡∏≠ Mock JWT
func (s *AuthService) VerifyPEAToken(tokenString string) (*model.User, error) {
	// ‚úÖ 1Ô∏è‚É£ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ Mock JWT ‡∏Å‡πà‡∏≠‡∏ô
	user, err := s.VerifyMockJWT(tokenString)
	if err == nil {
		log.Println("‚úÖ [VerifyPEAToken] ‡πÉ‡∏ä‡πâ Mock JWT Token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", user)
		return user, nil
	}
	log.Println("‚ö†Ô∏è [VerifyPEAToken] Mock JWT ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PEA API...")

	// ‚úÖ 2Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤ JWT ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö PEA API
	url := "http://localhost:4000/mock-verify" // üëà ‡πÉ‡∏ä‡πâ Mock API ‡πÅ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
	client := &http.Client{Timeout: 10 * time.Second}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Println("‚ùå [VerifyPEAToken] NewRequest Error:", err)
		return nil, err
	}

	req.Header.Set("Authorization", "Bearer "+tokenString)
	log.Printf("üîë [VerifyPEAToken] ‡∏™‡πà‡∏á Request ‡πÑ‡∏õ‡∏ó‡∏µ‡πà PEA API: %s\n", url)

	resp, err := client.Do(req)
	if err != nil {
		log.Println("‚ùå [VerifyPEAToken] Request Error:", err)
		return nil, err
	}
	defer resp.Body.Close()

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTTP Status Code
	if resp.StatusCode != http.StatusOK {
		log.Printf("üö® [VerifyPEAToken] API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: Status=%d\n", resp.StatusCode)
		return nil, errors.New("invalid token or unauthorized")
	}

	// ‚úÖ Decode JSON Response
	var userFromAPI model.User
	if err := json.NewDecoder(resp.Body).Decode(&userFromAPI); err != nil {
		log.Println("‚ùå [VerifyPEAToken] Decode Error:", err)
		return nil, err
	}

	log.Printf("‚úÖ [VerifyPEAToken] ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡∏à‡∏≤‡∏Å PEA API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: %+v\n", userFromAPI)
	return &userFromAPI, nil
}

// ‚úÖ VerifyMockJWT - ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ JWT ‡∏ó‡∏µ‡πà Mock ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
func (s *AuthService) VerifyMockJWT(tokenString string) (*model.User, error) {
	token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		return secretKey, nil
	})

	if err != nil {
		log.Println("‚ùå [VerifyMockJWT] Invalid JWT:", err)
		return nil, errors.New("invalid token")
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Claims ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
	if claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {
		// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Claims ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡πÑ‡∏´‡∏°
		empID, empOk := claims["emp_id"].(float64)
		firstName, firstOk := claims["first_name"].(string)
		lastName, lastOk := claims["last_name"].(string)
		email, emailOk := claims["email"].(string)
		role, roleOk := claims["role"].(string)

		// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà
		peaCode, peaCodeOk := claims["pea_code"].(string)
		peaShort, peaShortOk := claims["pea_short"].(string)
		peaName, peaNameOk := claims["pea_name"].(string)

		if !empOk || !firstOk || !lastOk || !emailOk || !roleOk || !peaCodeOk || !peaShortOk || !peaNameOk {
			log.Println("‚ùå [VerifyMockJWT] Claims ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö:", claims)
			return nil, errors.New("invalid token claims")
		}

		// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á User Object ‡∏à‡∏≤‡∏Å JWT Claims
		user := &model.User{
			EmpID:     uint(empID),
			FirstName: firstName,
			LastName:  lastName,
			Email:     email,
			Role:      role,
			PeaCode:   peaCode,
			PeaShort:  peaShort,
			PeaName:   peaName,
		}

		log.Println("‚úÖ [VerifyMockJWT] ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", user)
		return user, nil
	}

	return nil, errors.New("invalid token claims")
}
