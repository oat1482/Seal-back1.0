package service

import (
	"errors"
	"fmt"
	"log"
	"regexp"
	"strconv"
	"time"

	"github.com/Kev2406/PEA/internal/domain/model"
	"github.com/Kev2406/PEA/internal/domain/repository"
	"gorm.io/gorm"
)

type SealService struct {
	repo            *repository.SealRepository
	transactionRepo *repository.TransactionRepository
	logRepo         *repository.LogRepository
	db              *gorm.DB
}

func NewSealService(
	repo *repository.SealRepository,
	transactionRepo *repository.TransactionRepository,
	logRepo *repository.LogRepository,
	db *gorm.DB,
) *SealService {
	return &SealService{
		repo:            repo,
		transactionRepo: transactionRepo,
		logRepo:         logRepo,
		db:              db,
	}
}

// -------------------------------------------------------------------
//                            Existing Functionality
// -------------------------------------------------------------------

// GetLatestSealNumber retrieves the latest seal number from DB.
func (s *SealService) GetLatestSealNumber() (string, error) {
	latestSeal, err := s.repo.GetLatestSeal()
	if err != nil {
		return "", err
	}
	if latestSeal == nil {
		return "F000000000001", nil
	}
	return latestSeal.SealNumber, nil
}

func (s *SealService) GetSealsByStatus(status string) ([]model.Seal, error) {
	log.Println("üé¨ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏ã‡∏µ‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", status) // <<-- ‡πÉ‡∏™‡πà Log ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
	var seals []model.Seal
	if err := s.db.Where("status = ?", status).Find(&seals).Error; err != nil {
		return nil, err
	}
	log.Println("üîç ‡πÄ‡∏à‡∏≠‡∏ã‡∏µ‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:", len(seals))
	return seals, nil
}

func (s *SealService) GetSealByIDAndStatus(sealID uint, status string) (*model.Seal, error) {
	log.Println("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏ã‡∏µ‡∏•‡∏à‡∏≤‡∏Å ID:", sealID, " ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", status)

	var seal model.Seal
	if err := s.db.Where("id = ? AND status = ?", sealID, status).First(&seal).Error; err != nil {
		log.Println("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ã‡∏µ‡∏• ID:", sealID, "‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", status)
		return nil, err
	}

	log.Println("‚úÖ ‡πÄ‡∏à‡∏≠‡∏ã‡∏µ‡∏• ID:", sealID, " ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", status)
	return &seal, nil
}

// GetSealByNumber retrieves a seal by its number.
func (s *SealService) GetSealByNumber(sealNumber string) (*model.Seal, error) {
	return s.repo.FindByNumber(sealNumber)
}

// CreateSeal creates a single seal.
func (s *SealService) CreateSeal(seal *model.Seal, userID uint) error {
	existingSeal, _ := s.repo.FindByNumber(seal.SealNumber)
	if existingSeal != nil {
		return errors.New("‡∏°‡∏µ‡∏ã‡∏¥‡∏•‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")
	}
	now := time.Now()
	// Initial status is "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" (according to ‡∏Å‡∏ü‡∏†)
	seal.Status = "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
	seal.CreatedAt = now
	seal.UpdatedAt = now

	return s.db.Transaction(func(tx *gorm.DB) error {
		if err := s.repo.Create(seal); err != nil {
			return err
		}
		logEntry := model.Log{
			UserID: userID,
			Action: fmt.Sprintf("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ã‡∏¥‡∏• %s", seal.SealNumber),
		}
		return s.logRepo.Create(&logEntry)
	})
}

// GenerateAndCreateSeals generates multiple seals from the latest seal number.
func (s *SealService) GenerateAndCreateSeals(count int, userID uint) ([]model.Seal, error) {
	latestSealNumber, err := s.GetLatestSealNumber()
	if err != nil {
		return nil, err
	}
	sealNumbers, err := GenerateNextSealNumbers(latestSealNumber, count)
	if err != nil {
		return nil, err
	}
	now := time.Now()
	seals := make([]model.Seal, count)
	for i, sn := range sealNumbers {
		seals[i] = model.Seal{
			SealNumber: sn,
			Status:     "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
			CreatedAt:  now,
			UpdatedAt:  now,
		}
	}
	err = s.db.Transaction(func(tx *gorm.DB) error {
		if err := s.repo.CreateMultiple(seals); err != nil {
			return err
		}
		logEntry := model.Log{
			UserID: userID,
			Action: fmt.Sprintf("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ã‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà %d ‡∏≠‡∏±‡∏ô", count),
		}
		return s.logRepo.Create(&logEntry)
	})
	if err != nil {
		return nil, err
	}
	return seals, nil
}

// GenerateAndCreateSealsFromNumber generates seals starting from a specified seal number.
func (s *SealService) GenerateAndCreateSealsFromNumber(startingSealNumber string, count int, userID uint) ([]model.Seal, error) {
	if count == 1 {
		existingSeal, _ := s.repo.FindByNumber(startingSealNumber)
		if existingSeal != nil {
			return []model.Seal{*existingSeal}, nil
		}
	}
	sealNumbers, err := GenerateNextSealNumbers(startingSealNumber, count)
	if err != nil {
		return nil, err
	}
	now := time.Now()
	seals := make([]model.Seal, count)
	for i, sn := range sealNumbers {
		seals[i] = model.Seal{
			SealNumber: sn,
			Status:     "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
			CreatedAt:  now,
			UpdatedAt:  now,
		}
	}
	err = s.db.Transaction(func(tx *gorm.DB) error {
		if err := s.repo.CreateMultiple(seals); err != nil {
			return err
		}
		logEntry := model.Log{
			UserID: userID,
			Action: fmt.Sprintf("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ã‡∏¥‡∏• %d ‡∏≠‡∏±‡∏ô ‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡πÄ‡∏£‡∏¥‡πà‡∏° %s", count, startingSealNumber),
		}
		return s.logRepo.Create(&logEntry)
	})
	if err != nil {
		return nil, err
	}
	return seals, nil
}

// -------------------------------------------------------------------
//                    Legacy Mechanics: IssueSeal, UseSeal, ReturnSeal
// -------------------------------------------------------------------

func (s *SealService) IssueSeal(sealNumber string, userID uint) error {
	return s.UpdateSealStatus(sealNumber, "‡∏à‡πà‡∏≤‡∏¢", userID)
}

func (s *SealService) UseSeal(sealNumber string, userID uint) error {
	return s.UpdateSealStatus(sealNumber, "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß", userID)
}

func (s *SealService) ReturnSeal(sealNumber string, userID uint) error {
	return s.UpdateSealStatus(sealNumber, "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß", userID)
}

func (s *SealService) UpdateSealStatus(sealNumber string, newStatus string, userID uint) error {
	seal, err := s.repo.FindByNumber(sealNumber)
	if err != nil {
		return errors.New("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ã‡∏¥‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
	}
	now := time.Now()
	logAction := ""
	switch newStatus {
	case "‡∏à‡πà‡∏≤‡∏¢":
		if seal.Status != "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" {
			return errors.New("‡∏ã‡∏¥‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ")
		}
		seal.Status = "‡∏à‡πà‡∏≤‡∏¢"
		seal.IssuedBy = &userID
		seal.IssuedAt = &now
		logAction = fmt.Sprintf("‡∏à‡πà‡∏≤‡∏¢‡∏ã‡∏¥‡∏• %s", sealNumber)
	case "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß":
		if seal.Status != "‡∏à‡πà‡∏≤‡∏¢" {
			return errors.New("‡∏ã‡∏¥‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏à‡πà‡∏≤‡∏¢' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ")
		}
		seal.Status = "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß"
		seal.UsedBy = &userID
		seal.UsedAt = &now
		logAction = fmt.Sprintf("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ã‡∏¥‡∏• %s", sealNumber)
	case "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß":
		if seal.Status != "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß" {
			return errors.New("‡∏ã‡∏¥‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
		}
		seal.Status = "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
		seal.ReturnedBy = &userID
		seal.ReturnedAt = &now
		logAction = fmt.Sprintf("‡∏ã‡∏¥‡∏• %s ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß", sealNumber)
	default:
		return errors.New("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
	}
	return s.db.Transaction(func(tx *gorm.DB) error {
		if err := s.repo.Update(seal); err != nil {
			return err
		}
		logEntry := model.Log{
			UserID: userID,
			Action: logAction,
		}
		return s.logRepo.Create(&logEntry)
	})
}

// -------------------------------------------------------------------
//        New Methods: Support SerialNumber & Remarks Extra Data
// -------------------------------------------------------------------

func (s *SealService) UseSealWithSerial(sealNumber string, userID uint, deviceSerial string) error {
	return s.UpdateSealStatusWithExtra(sealNumber, "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß", userID, deviceSerial, "")
}

func (s *SealService) ReturnSealWithRemarks(sealNumber string, userID uint, remarks string) error {
	return s.UpdateSealStatusWithExtra(sealNumber, "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß", userID, "", remarks)
}

// IssueSealWithDetails: New method to support additional data for issuing seal.
func (s *SealService) IssueSealWithDetails(sealNumber string, issuedTo uint, employeeCode string, remark string) error {
	seal, err := s.repo.FindByNumber(sealNumber)
	if err != nil {
		return errors.New("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ã‡∏¥‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
	}
	if seal.Status != "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" {
		return errors.New("‡∏ã‡∏¥‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ")
	}
	now := time.Now()
	// Update seal fields with additional details.
	seal.Status = "‡∏à‡πà‡∏≤‡∏¢"
	seal.IssuedTo = &issuedTo
	seal.IssuedAt = &now
	seal.EmployeeCode = employeeCode // Must exist in model.Seal
	seal.IssueRemark = remark        // Must exist in model.Seal

	return s.db.Transaction(func(tx *gorm.DB) error {
		if err := s.repo.Update(seal); err != nil {
			return err
		}
		logEntry := model.Log{
			UserID: issuedTo,
			Action: fmt.Sprintf("‡∏à‡πà‡∏≤‡∏¢‡∏ã‡∏¥‡∏• %s ‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô %d (‡∏£‡∏´‡∏±‡∏™: %s) - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: %s", sealNumber, issuedTo, employeeCode, remark),
		}
		return s.logRepo.Create(&logEntry)
	})
}

func (s *SealService) UpdateSealStatusWithExtra(
	sealNumber string,
	newStatus string,
	userID uint,
	deviceSerial string,
	remarks string,
) error {
	seal, err := s.repo.FindByNumber(sealNumber)
	if err != nil {
		return errors.New("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ã‡∏¥‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
	}
	now := time.Now()
	logAction := ""
	switch newStatus {
	case "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß":
		if seal.Status != "‡∏à‡πà‡∏≤‡∏¢" {
			return errors.New("‡∏ã‡∏¥‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏à‡πà‡∏≤‡∏¢' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ")
		}
		seal.Status = "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß"
		seal.UsedBy = &userID
		seal.UsedAt = &now
		// Save device serial into InstalledSerial (must exist in model.Seal)
		seal.InstalledSerial = deviceSerial
		logAction = fmt.Sprintf("‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ã‡∏¥‡∏• %s (Serial: %s)", sealNumber, deviceSerial)
	case "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß":
		if seal.Status != "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß" {
			return errors.New("‡∏ã‡∏¥‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
		}
		seal.Status = "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
		seal.ReturnedBy = &userID
		seal.ReturnedAt = &now
		// Save remarks into ReturnRemarks (must exist in model.Seal)
		seal.ReturnRemarks = remarks
		logAction = fmt.Sprintf("‡∏ã‡∏¥‡∏• %s ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: %s)", sealNumber, remarks)
	default:
		return errors.New("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (version Extra)")
	}
	return s.db.Transaction(func(tx *gorm.DB) error {
		if err := s.repo.Update(seal); err != nil {
			return err
		}
		logEntry := model.Log{
			UserID: userID,
			Action: logAction,
		}
		return s.logRepo.Create(&logEntry)
	})
}

// -------------------------------------------------------------------
//               GenerateNextSealNumbers
// -------------------------------------------------------------------

func GenerateNextSealNumbers(latest string, count int) ([]string, error) {
	if latest == "" {
		latest = "F000000000001"
	}
	re := regexp.MustCompile(`^([A-Za-z]*)(\d+)$`)
	matches := re.FindStringSubmatch(latest)
	if len(matches) != 3 {
		return nil, errors.New("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç‡∏ã‡∏¥‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
	}
	prefix := matches[1]
	numberPart := matches[2]
	lastInt, err := strconv.ParseInt(numberPart, 10, 64)
	if err != nil {
		return nil, errors.New("‡πÄ‡∏•‡∏Ç‡∏ã‡∏¥‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
	}
	sealNumbers := make([]string, count)
	numberLength := len(numberPart)
	for i := 0; i < count; i++ {
		newNum := lastInt + int64(i)
		sealNumbers[i] = fmt.Sprintf("%s%0*d", prefix, numberLength, newNum)
	}
	return sealNumbers, nil
}

// -------------------------------------------------------------------
//           GetSealReport (4 statuses)
// -------------------------------------------------------------------

func (s *SealService) GetSealReport() (map[string]interface{}, error) {
	var total, ready, paid, installed, used int64
	if err := s.db.Model(&model.Seal{}).Where("status = ?", "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô").Count(&ready).Error; err != nil {
		return nil, err
	}
	if err := s.db.Model(&model.Seal{}).Where("status = ?", "‡∏à‡πà‡∏≤‡∏¢").Count(&paid).Error; err != nil {
		return nil, err
	}
	if err := s.db.Model(&model.Seal{}).Where("status = ?", "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß").Count(&installed).Error; err != nil {
		return nil, err
	}
	if err := s.db.Model(&model.Seal{}).Where("status = ?", "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß").Count(&used).Error; err != nil {
		return nil, err
	}
	total = ready + paid + installed + used
	report := map[string]interface{}{
		"total_seals": total,
		"‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô": ready,
		"‡∏à‡πà‡∏≤‡∏¢":        paid,
		"‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß": installed,
		"‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß":  used,
	}
	return report, nil
}
